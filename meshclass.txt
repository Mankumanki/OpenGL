#include<glad/glad.h>
#include <glfw3.h>
#include<iostream>
#include<glm.hpp>
#include<vector>
#include<string>
#include"Shader.h"
using namespace std;
using namespace glm;
struct Vertex
{
	vec3 position;
	vec3 normals;
	vec2 texcord;
	vec3 Tangent;
	vec3 Bitangent;
};

struct Texture
{
	unsigned int Id;
	string type;
	string path;
};

struct Material
{
	vec4 diffuse;
	vec4 spec;
	vec4 ambient;
};

class Mesh
{
public:

	vector<Vertex> vertices;
	vector<unsigned int> indices;
	vector<Texture> Textures;
	Material mat;
	
		unsigned int VAO;
		unsigned int uniformBlockIndex;

	Mesh(vector<Vertex> v, vector<unsigned int> i, vector<Texture> t,Material mat)
	{
		this->vertices = v;
		this->indices = i;
		this->Textures = t;
		this->mat = mat;

		setupmesh();
	}

	~Mesh() {}

	void Draw(Shader &shader)
	{
		unsigned int diffuseNr = 1;    //different texture maps
		unsigned int specularNr = 1;
		unsigned int normalNr = 1;
		unsigned int heightNr = 1;

		for (unsigned int i = 0;i < Textures.size();i++)
		{
			glActiveTexture(GL_TEXTURE0 + i);

			string number;
			string name = Textures[i].type;

			if (name == "texture_diffuse")
				number = to_string(diffuseNr++);
			else if (name == "texture_specular")
				number = to_string(specularNr++); // transfer unsigned int to stream
			else if (name == "texture_normal")
				number = to_string(normalNr++); // transfer unsigned int to stream
			else if (name == "texture_height")
				number = to_string(heightNr++); // transfer unsigned int to stream

			glUniform1i(glGetUniformLocation(shader.program, (name + number).c_str()), i);
			glBindTexture(GL_TEXTURE_2D, Textures[i].Id);
		}

		glBindVertexArray(VAO);
		glDrawElements(GL_TRIANGLES, indices.size(), GL_UNSIGNED_INT, 0);

		glBindVertexArray(0);

		glActiveTexture(GL_TEXTURE0);

	}

private:
	unsigned int VBO;
	unsigned int EBO;

	void setupmesh()
	{
		glGenVertexArrays(1, &VAO);  //for vertex
		glGenBuffers(1, &VBO);  //   for vertices positions
		glGenBuffers(1, &EBO);  // for indices
		glGenBuffers(1, &uniformBlockIndex);

		glBindVertexArray(VAO);

		glBindBuffer(GL_ARRAY_BUFFER, VBO);

		glBufferData(GL_ARRAY_BUFFER, (vertices.size()*sizeof(Vertex))+sizeof(mat), &vertices[0], GL_STATIC_DRAW);
		
		glBindBuffer(GL_UNIFORM_BUFFER, uniformBlockIndex);
		glBufferData(GL_UNIFORM_BUFFER, sizeof(mat), (void*)(&mat), GL_STATIC_DRAW);

		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
		glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), &indices[0], GL_STATIC_DRAW);

		glEnableVertexAttribArray(0);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)0);

		glEnableVertexAttribArray(1);
		glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex, normals));

		glEnableVertexAttribArray(2);
		glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex, texcord));

		glEnableVertexAttribArray(3);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex, Tangent));

		glEnableVertexAttribArray(4);
		glVertexAttribPointer(4, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex, Bitangent));

		glBindVertexArray(0);
	}

};

